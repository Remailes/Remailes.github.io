= Processamento Digital de Imagens
:author: Izaias Remailes Silva de Paula
:email: izzaias@outlook.com.br

== Exercício 3.2

Este exercício tem a intenção de colocar em prática as técnicas de manipular pixels em uma imagem. O programa elaborado tem duas funcionalidades, a primeira cria uma região(de escolha do usuário) com efeito negativo, e a segunda troca aleatoriamente 4 regiões da imagem fornecida.

Para a demonstração será usada essa imagem abaixo.

image::bird.png[Passaro]

No código do programa elaborado, após a decaração das variáveis, é solicitado ao usuário 
para fornecer dois pontos na imagens, esses pontos indicaram ao programa a região da imagem que deve ficar com efeito negativo, e assim o código entra em um 'loop' para percorrer os pixels da região escolhida pelo usuário modificando seus valores aplicando o efeito de negativo, e depois a imagem com efeito é mostrada e a imagem é fechada.

E no segundo trecho do código, a imagem é novamente aberta. Mas antes de continuar é 
fundamental saber que foram declaradas quatro matrizes de dimensões 128x128 como variaveis globais, isso porque existe a função 'pintar(int m)', esta função pinta a nova imagem a seguinte sequência: quadrante 4, quadrante 1, quadrante 2 e quadrante 3, de acordo com o inteiro 'm' recebido. Por exemplo: se a imagem ainda não foi mexida, a o intiro 'm' recebido foi 2, a região do quadrante 4 da nova imagem receberá a região do quadrante 2 da imagem original. E continuando na função 'main()', após a abertura da imagem em tons de cinza, cada região da imagem é guardada em outras matrizes já mencionadas, e por fim são gerados números aleatórios que determinaram as trocas de regiões na nova imagem.

....
#include <iostream>
#include <cv.h>
#include <highgui.h>
#include <opencv2/highgui/highgui.hpp> 
#include <time.h>

using namespace cv;
using namespace std;

Mat image2;
int A0[128][128];
int A1[128][128];
int A2[128][128];
int A3[128][128];
int cont=0;

void pintar(int m){
  for(int i=0;i<255;i++){
    for(int j=0;j<255;j++){
      if(cont == 0){
        if(i<128 && j<128){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i][j];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i][j];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i][j];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i][j];
              break;
          }
        }
      }
      if(cont == 1){
        if(i<128 && j>127){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i][j-128];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i][j-128];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i][j-128];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i][j-128];
              break;
          }
        }
      }
      if(cont == 2){
        if(i>127 && j<128){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i-128][j];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i-128][j];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i-128][j];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i-128][j];
              break;
          }
        }
      }
      if(cont == 3){
        if(i>127 && j>127){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i-128][j-128];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i-128][j-128];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i-128][j-128];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i-128][j-128];
              break;
          }
        }
      }
    }
  }
}

int main(int, char**){
  
//Primeiro trecho do código
//***************************************************************

  Mat image, image3;
  int x1, x2, y1, y2, width, height;

  image= imread("bird.png",CV_LOAD_IMAGE_GRAYSCALE);
  if(!image.data)
    cout << "nao abriu bolhas.png" << endl;

  cout<<"Forneça a coordenada 'x' do primeiro ponto:";
  cin >> x1;
  cout<<"Forneça a coordenada 'y' do primeiro ponto:";
  cin >> y1;
  cout<<"Forneça a coordenada 'x' do segundo ponto:";
  cin >> x2;
  cout<<"Forneça a coordenada 'y' do primeiro ponto:";
  cin >> y2;

  width=image.size().width;
  height=image.size().height;

  for(int i=x1;i<x2;i++){
    for(int j=y1;j<y2;j++){
      int a = image.at<uchar>(i,j);
      int b = 255-a;
      image.at<uchar>(i,j)=b;
    }
  }

  imshow("image", image);
  waitKey();

//Segundo trecho do código
//***************************************************************

  int regA=10, regB=10, regC=10, regD=10;
  
  bool T= false;
  srand( (unsigned)time(NULL) );
  image2 = imread("bird.png",CV_LOAD_IMAGE_GRAYSCALE);
  if(!image2.data)
    cout << "nao abriu bolhas.png" << endl;

  for(int i=0;i<height;i++){
    for(int j=0;j<width;j++){
      if(i<128 && j<128){
        A0[i][j] = image2.at<uchar>(i,j);
      }
      if(i<128 && j>127){
        A1[i][j-128] = image2.at<uchar>(i,j);
      }
      if(i>127 && j<128){
        A2[i-128][j] = image2.at<uchar>(i,j);
      }
      if(i>127 && j>127){
        A3[i-128][j-128] = image2.at<uchar>(i,j);
      }
    }
  }

  int e;
  while(T!=true){
    e = rand() % 4;
    if(regA==10){
      regA=e;
      pintar(e);
      cont++;
    }
    if(regA!=10 && e!=regA && regB==10){
      regB=e;
      pintar(e);
      cont++;
    }
    if(regA!=10 && e!=regA && regB!=10 && e!=regB &&regC==10){
      regC=e;
      pintar(e);
      cont++;
    }
    if(regA!=10 && e!=regA && regB!=10 && e!=regB && regC!=10 && e!=regC && regD==10){
      regD=e;
      pintar(e);
      cont++;
      T = true;
    }
  }

  imwrite("regioes.png", image2);
  waitKey();

  return 0;
}
....

Na execução do programa, os pon tos fornecidos foram: P1(20,20) e P2(160,160), e podemos 
ver nas figuras abaixo o resultado do processamento.

image::negativo.png[efeito]
image::regioes.png[troca]

== Exercício 4.2

Este exercício tem como finalidade melhorar o programa 'labeling.cpp', onde este lê uma imagen e soma a quantidade de objetos nela contida, para essa tarefa usei a imagem abaixo para melhorar o programa:

image::bolhas.png[bolha]

As melhorias sugeridas foram as seguintes:
->Fazer programa conseguir contar mais que 255 abjetos na cena.
->Identificar objetos com e sem buracos.
->Excluir bolhas que tocam as bordas da imagem.

Para isso, o código abaixo foi desenvolvido.

....
#include <iostream>
#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char** argv){
  
  Mat image, image2;
  int width, height, nobjects, buracos, contador;  
  CvPoint p;

  image = imread(argv[1],CV_LOAD_IMAGE_GRAYSCALE);  
  if(!image.data){
    std::cout << "imagem nao carregou corretamente\n";
    return(-1);
  }

  width=image.size().width;
  height=image.size().height;
  p.x=0;
  p.y=0;
  nobjects=0;
  buracos=0;
  /*Cada vez que a quantidade de objetos encontrados ultrapa_
  ssar 255 o contador encrementarar e a variavel nobjects
  voltara a ser igual a zero, assim ao final saberemos a 
  quantidade de objetos fazendo o seguinte cauculo:
  nobjects = (255*contador + nobjects);*/
  contador=0;

  //Eliminando bolhas na borda
  for(int i=0; i<height; i++){
    int a = image.at<uchar>(0,i);
    int b = image.at<uchar>(255,i);
    if(a == 255){
      p.x=i;
      p.y=0;
      floodFill(image,p,nobjects);
    }
    if(b == 255){
      p.x=i;
      p.y=255;
      floodFill(image,p,nobjects);
    }
  }
  for(int i=0; i<width; i++){
    int a = image.at<uchar>(i,0);
    int b = image.at<uchar>(i,255);
    if(a == 255){
      p.x=0;
      p.y=i;
      floodFill(image,p,nobjects);
    }
    if(b == 255){
      p.x=255;
      p.y=i;
      floodFill(image,p,nobjects);
    }
  }
  
  //Marcando as manchas. E manchas com buracos
  for(int i=0; i<height; i++){
    for(int j=0; j<width; j++){
      if(image.at<uchar>(i,j) == 255){
        // achou um objeto
        nobjects++;
        if(nobjects==255){
          contador++;
          nobjects=0;
        }
        p.x=j;
        p.y=i;
        floodFill(image,p,nobjects);
      }
      //achou um objeto com buraco
      if(image.at<uchar>(i,j)!=0 && image.at<uchar>(i,j)!=255 && image.at<uchar>(i,j)!=100){
        if(image.at<uchar>(i,j-1) == 0){
          p.x=j-1;
          p.y=i;
          floodFill(image,p,100);
          buracos++;
        }
      }
    }
  }

  p.x=0;
  p.y=0;
  floodFill(image,p,0);
  buracos--;
  nobjects = (255*contador + nobjects);

  cout<<"A imagem contem "<<nobjects-buracos<<" objetos sem buracos."<<endl;
  cout<<"E contem "<<buracos<<" objetos com buraco."<<endl;
  imshow("image", image);
  waitKey();

  return 0;
}
....

Para resolver o primeiro problema mensionado: Cada vez que a quantidade de objetos encontrados ultrapassar 255 o contador encrementarar e a variavel nobjects voltara a ser igual a zero, assim ao final saberemos a quantidade de objetos fazendo o seguinte cauculo: nobjects = (255*contador + nobjects).

Para o segundo problema: Se deve percorrer a imagem, e se chegarmos a pixels que pertenção a im objeto, verifica-se seu pixel a esquerda, se ele não é branco(valor 255) nem preto(valor 0), então é um buraco dentro de um objeto, então chama-se a função 'floodFill()' para marcar o buravo, e incrementa-se a variavel 'buracos', e para saber a quantidade de objetos sem buracos, se diminui a quantidade total de objetos da quantidade que possui buracos.

E para o terceiro problema: Percorre-se as bordas, e toda vez que um objetos for encontrado, chama-se a função 'floodFill()' para pintar o objetos com o valor de fundo da imagem, assim este ficando invisível para contagem.

O resultado deste programa podemos ver nas imagen abaixo:

image::Qbolhas.png[qbolhas]
image::result.png[result]

=== Exercício 8.2
== Filtro Homomórfico

=== Exercício 11.1

esta atividade tem como objetivo melhorar o programa 'pontilhismo.cpp' fazendo uso das bordas fornecidas pelo algorítmo de canny. Para o programa foi utilizada a imagem abaixo para ser inserido os efeitos.

image::arara.jpg[passaro]

O código usado para a tarefa podemos var logo abaixo, e logo após a descrissão do programa:

....
#include <iostream>
#include <opencv2/opencv.hpp>
#include <fstream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <numeric>
#include <ctime>
#include <cstdlib>

using namespace std;
using namespace cv;
#define STEP 8
#define JITTER 4
#define RAIO 5

int main(int argc, char**argv){

	Mat image, border, points, efeito;
	int x, y, gray, width, height;
	vector<int> yrange;
	vector<int> xrange;
	srand(time(0));

	image = imread("arara.jpg", CV_LOAD_IMAGE_GRAYSCALE);
	width = image.size().width;
	height = image.size().height;
	xrange.resize(height/STEP);
	yrange.resize(width/STEP);
	iota(xrange.begin(), xrange.end(), 0);
	iota(yrange.begin(), yrange.end(), 0);

	for(uint i=0; i<xrange.size(); i++){
		xrange[i]= xrange[i]*STEP+STEP/2;
	}

	for(uint i=0; i<yrange.size(); i++){
		yrange[i]= yrange[i]*STEP+STEP/2;
	}

	points = Mat(height, width, CV_8U, Scalar(255));
	efeito = Mat(height, width, CV_8U, Scalar(255));
	random_shuffle(xrange.begin(), xrange.end());

	image.copyTo(efeito);

	for(auto i : xrange){
		random_shuffle(yrange.begin(), yrange.end());
		for(auto j : yrange){
			x = i+rand()%(2*JITTER)-JITTER+1;
			y = j+rand()%(2*JITTER)-JITTER+1;
			gray = image.at<uchar>(x,y);
			circle(points, cv::Point(y,x), RAIO, CV_RGB(gray,gray,gray), -1, CV_AA);
		}
	}	
	imwrite("pontilhismo.jpg", points);

	int Limiar = 25;
	int raio = 6;
	for(int k=0; k<6; k++){
		Canny(image, border, Limiar, 3*Limiar);
		raio--;
		for(int i=0; i<height; i++){
			for(int j=0; j<width; j++){
				if(border.at<uchar>(i,j) == 255){
					gray = image.at<uchar>(i,j);
					circle(efeito, cv::Point(j,i), raio, CV_RGB(gray,gray,gray), -1, CV_AA);
				}	
			}
		}
		Limiar = Limiar*10;
	}	
	imwrite("imprecionismo.jpg", efeito);

	return 0;
}
....

O programa tem como entrada uma imagem qualquer, e como saída é gereda e salva duas imagens editadas, onde a primeira(pontilhismo.jpg) é a imagem com efeito de pontilhismo aplicado, aqui simplismente foi repetido um trexo do programa 'pontilhismo.cpp'. Já para a outra imagem de saída, como sugerido na descrição da atividade, foi feito um loop de 6 iterações, onde para cada iteração é gerada uma imagem auxiliar de bordas da imagem original utilizando o algoritmo de canny, e para cada iteração é aplicado o efeito de pontilhismo usando para os circulos um raio menor para cada iteração. Os resultados vemos nas figuras abaixo, onde a primeira é a imagem com pontilhismo,  e a seguda é o melhoramento do efeito pontilhismo.

image::pontilhismo.jpg[pontilhismo]
image::imprecionismo.jpg[imprecionismo]
